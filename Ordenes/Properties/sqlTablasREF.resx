<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="acabados_CargaDET" xml:space="preserve">
    <value>SELECT idAcabado,Descripcion,AplicaA,idTalla AS CodTalla,Costo,EstReg AS Estado,'' AS Accion FROM dbo.pr_GHAcabados</value>
    <comment>Carga el listado de acabados disponibles</comment>
  </data>
  <data name="acabados_CargaTallas" xml:space="preserve">
    <value>SELECT IdTalla AS CodTalla,Talla AS Descripcion FROM dbo.ItmTallas WHERE EmpCod=@CodEmpresa</value>
    <comment>Carga las tallas disponibles</comment>
  </data>
  <data name="acabados_Codigo" xml:space="preserve">
    <value>SELECT ISNULL(MAX(idAcabado),0) AS idAcabado FROM pr_GHAcabados</value>
    <comment>Calcula el codigo de los acabados</comment>
  </data>
  <data name="acabados_Guardar" xml:space="preserve">
    <value>DELETE FROM pr_GHAcabados WHERE idAcabado=@idAcabado;INSERT INTO pr_GHAcabados VALUES (@idAcabado,@Descripcion,@AplicaA,@CodTalla,@Costo,@Estado)</value>
    <comment>Guarda los acabados</comment>
  </data>
  <data name="coberturas_CargaDET" xml:space="preserve">
    <value>SELECT idCobertura,Descripcion,Gramos,EstReg AS Estado,'' AS Accion FROM dbo.pr_GHCoberturas</value>
    <comment>Carga el listado de coberturas</comment>
  </data>
  <data name="coberturas_Codigo" xml:space="preserve">
    <value>SELECT ISNULL(MAX(idCobertura),0) FROM pr_GHCoberturas</value>
    <comment>Calcula el codigo de la cobertura</comment>
  </data>
  <data name="coberturas_Guardar" xml:space="preserve">
    <value>DELETE FROM pr_GHCoberturas WHERE idCobertura=@idCobertura;INSERT INTO pr_GHCoberturas VALUES (@idCobertura,@Descripcion,@Gramos,@Estado);</value>
    <comment>Guarda las coberturas</comment>
  </data>
  <data name="pext_cargaDET" xml:space="preserve">
    <value>SELECT dbo.pr_GHPorcentajePliegoEXT.SecMaterial, dbo.ItmMae.ItmDsc AS Material, dbo.pr_GHPorcentajePliegoEXT.Porcentaje FROM dbo.pr_GHPorcentajePliegoEXT INNER JOIN dbo.ItmMae ON dbo.pr_GHPorcentajePliegoEXT.SecMaterial = dbo.ItmMae.Secuencial WHERE        (dbo.ItmMae.EmpCod = @CodEmpresa) AND (dbo.pr_GHPorcentajePliegoEXT.CmbGrupo = @CodGrupo) AND (dbo.pr_GHPorcentajePliegoEXT.CmbComponente = @CodComponente) AND (dbo.pr_GHPorcentajePliegoEXT.EstReg = 'True')</value>
    <comment>Carga el detalle de pliegos extras</comment>
  </data>
  <data name="pext_EliminaG" xml:space="preserve">
    <value>DELETE FROM dbo.pr_GHPorcentajePliegoEXT WHERE CmbGrupo=@CodGrupo AND CmbComponente=@CodComponente</value>
    <comment>Elimina los registros para volver a ingresar</comment>
  </data>
  <data name="pext_Guarda" xml:space="preserve">
    <value>INSERT INTO dbo.pr_GHPorcentajePliegoEXT VALUES (@CodGrupo,@CodComponente,@SecMaterial,@Porcentaje,'True')</value>
    <comment>Inserta un registro de pliego extra</comment>
  </data>
  <data name="pimp_CargaDET" xml:space="preserve">
    <value>SELECT pr_GHCostoProcesoIMP.idTalla AS CodTalla, ItmTallas.Talla, pr_GHCostoProcesoIMP.NumColores, pr_GHCostoProcesoIMP.CostoImpMin AS CostoMIN, pr_GHCostoProcesoIMP.NumPliegosXmin AS PliegosMIN, pr_GHCostoProcesoIMP.CostoMinPP AS CostoPP, pr_GHCostoProcesoIMP.NumMinPP AS MinutosPP FROM pr_GHCostoProcesoIMP INNER JOIN ItmTallas ON pr_GHCostoProcesoIMP.idTalla = ItmTallas.IdTalla WHERE (pr_GHCostoProcesoIMP.idPlaca = @CodMaquina)</value>
    <comment>Carga el detalle de los procesos de impresión</comment>
  </data>
  <data name="pimp_EliminaG" xml:space="preserve">
    <value>DELETE FROM dbo.pr_GHCostoProcesoIMP WHERE idPlaca=@CodPlaca</value>
    <comment>Elimina los registros de proceso de impresion para volver a guardar</comment>
  </data>
  <data name="pimp_GuardaPIMP" xml:space="preserve">
    <value>INSERT INTO pr_GHCostoProcesoIMP VALUES (@idTalla,@idPlaca,@NumColores,@CostoIMPMIN,@NumPliegosMIN,@CostoMINPP,@NumMinutosPP,'True')</value>
    <comment>Guarda un registro de proceso de impresion</comment>
  </data>
  <data name="placas_CargaDET" xml:space="preserve">
    <value>SELECT idPlaca,Descripcion,Ancho,Alto,CostoPlaca AS Costo,EstReg AS Estado,'' AS Accion FROM pr_GHPlacas</value>
    <comment>Carga el detalle de placas</comment>
  </data>
  <data name="placas_Codigo" xml:space="preserve">
    <value>SELECT ISNULL(MAX(idPlaca),0) AS Codigo FROM pr_GHPlacas</value>
    <comment>Calcula el codigo de la placa</comment>
  </data>
  <data name="placas_Guardar" xml:space="preserve">
    <value>DELETE FROM pr_GHPlacas WHERE idPlaca=@idPlaca;INSERT INTO pr_GHPlacas VALUES (@idPlaca,@Descripcion,@Ancho,@Alto,@CostoPlaca,@Estado)</value>
    <comment>Guarda las placas</comment>
  </data>
  <data name="tipocolor_CargaDET" xml:space="preserve">
    <value>SELECT idColor,Descripcion,CostoGramo AS Costo,EstReg AS Estado,'' AS Accion FROM dbo.pr_GHTipoColor</value>
    <comment>Carga el detalle de los tipos de colores</comment>
  </data>
  <data name="tipocolor_Codigo" xml:space="preserve">
    <value>SELECT ISNULL(MAX(idColor),0) AS Codigo FROM pr_GHTipoColor</value>
    <comment>Calcula el codigo del tipo de color</comment>
  </data>
  <data name="tipocolor_Guarda" xml:space="preserve">
    <value>DELETE FROM pr_GHTipoColor WHERE idColor=@idColor;INSERT INTO pr_GHTipoColor VALUES (@idColor,@Descripcion,@Costo,@Estado)</value>
    <comment>Guarda el tipo de color</comment>
  </data>
</root>